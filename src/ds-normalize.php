<?php
/**
 * Нормалізувати шлях відповідно до сепаратора директорій для поточної операційної системи.
 * Використовуйте `/` або `\` для розділення директорій, а ця функція замінить всі роздільники, що не відповідають поточній ОС, на відповідний.
 * 
 * ***Для використання `>` скористайтесь іншими функціями: pathNormalize() або pathNormalizePlus().***
 */
function dsNormalize(string $path): string {
    return str_replace(DS === '/' ? '\\' : '/', DS, $path);
}

/**
 * Отримати коректний шлях замінивши всі `>` на справжній сепаратор директорій для поточної операційної системи.
 * Потрібно використовувати для обробки всіх шляхів (окрім URL) щоб дозволити безпечне перенесення коду між пристроями з різними ОС.
 * 
 * @param string $path для розділення директорій використовувати ТІЛЬКИ знак `>` (наприклад: `path>to>file.php`)
 * 
 * ***Не використовуйте `/` або `\` адже функція їх не приводе у відповідність до ОС - для цього є функція dsNormalize()***
 */
function pathNormalize(string $path): string {
    return str_replace('>', DS, $path);
}

/**
 * Аналогічно до `pathNormalize()`, але додано підтримку альтернативного зворотного ходу по директоріям.
 * Повертає коректний шлях замінивши всі:
 * - `>` - на справжній сепаратор директорій для поточної операційної системи,
 * - `<` - на `../` або `..\` в залежності від сепаратора директорій для поточної ОС.
 * Потрібно використовувати для обробки всіх шляхів (окрім URL) щоб дозволити безпечне перенесення коду між пристроями з різними ОС.
 * 
 * @param string $path для розділення директорій використовувати ТІЛЬКИ знаки `>` або `<` (наприклад: `path>to>file.php` або `<path>of>root`)
 * 
 * ***Не використовуйте `/` або `\` адже функція їх не приводе у відповідність до ОС - для цього є функція dsNormalize()***
 */
function pathNormalizePlus(string $path): string {
    return str_replace('>', DS, str_replace('<', '..' . DS, $path));
}